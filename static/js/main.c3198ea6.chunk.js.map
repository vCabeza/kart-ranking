{"version":3,"sources":["actions/types.js","class/DriverScore.js","class/Race.js","actions/index.js","components/drivers/DriverCard.jsx","components/rankings/GlobalRanking.jsx","components/Index.jsx","components/rankings/DriverRanking.jsx","components/rankings/RaceRanking.jsx","components/drivers/DriverProfile.jsx","components/App.js","reducers/rankingReducer.js","reducers/index.js","index.js"],"names":["FETCH_DRIVERS","FETCH_SELECTED_DRIVER","DriverScore","id","name","time","this","Race","driversScore","fetchResults","dispatch","races","Map","drivers","forEach","driver","globalScore","race","newRace","newDriver","get","driverScore","_id","undefined","set","concat","addDriverScore","sort","a","b","points","i","index","findIndex","updateScores","setGlobalScore","type","fetchSelectedDriver","selectedDriver","find","DriverCard","Card","Img","variant","src","props","picture","Body","Title","Text","team","age","Component","ClasificacionGlobal","popover","Popover","Table","striped","bordered","map","className","isIndex","driverName","OverlayTrigger","placement","overlay","to","connect","state","ranking","actions","Index","DriverRanking","getRacePosition","raceName","hover","RaceRanking","DriverProfile","driverId","match","params","Row","Col","xs","md","Image","rounded","as","Carousel","Item","App","Container","fluid","exact","path","component","initialState","combineReducers","action","values","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","reduxThunk","store","createStore","reducers","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.c3198ea6.chunk.js","sourcesContent":["export const FETCH_DRIVERS = 'fetch_drivers';\r\nexport const FETCH_SELECTED_DRIVER = 'detch_selected_driver';\r\n","export default class DriverScore {\r\n  constructor(id, name, time) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.time = time;\r\n  }\r\n}\r\n","export default class Race {\r\n  constructor(name, driversScore) {\r\n    this.name = name;\r\n    this.driversScore = driversScore;\r\n  }\r\n}\r\n","import { FETCH_DRIVERS, FETCH_SELECTED_DRIVER } from './types';\r\nimport DriverScore from '../class/DriverScore';\r\nimport Race from '../class/Race';\r\nimport drivers from '../drivers.json';\r\n\r\nexport const fetchResults = () => (dispatch) => {\r\n  let races = new Map();\r\n\r\n  drivers.forEach((driver) => {\r\n    driver.globalScore = 0;\r\n    driver.races.forEach((race) => {\r\n      addDriverScore(race, driver, races);\r\n    });\r\n  });\r\n\r\n  races.forEach((race) => {\r\n    race.driversScore.sort(function (a, b) {\r\n      if (a.time < b.time) return -1;\r\n      if (a.time > b.time) return 1;\r\n      return 0;\r\n    });\r\n    races.set(race.name, race);\r\n  });\r\n\r\n  setGlobalScore(races);\r\n\r\n  dispatch({\r\n    type: FETCH_DRIVERS,\r\n    races,\r\n    drivers,\r\n  });\r\n};\r\n\r\nexport const fetchSelectedDriver = (id) => (dispatch) => {\r\n  const selectedDriver = drivers.find((driver) => driver._id === id);\r\n\r\n  dispatch({\r\n    type: FETCH_SELECTED_DRIVER,\r\n    selectedDriver,\r\n  });\r\n};\r\n\r\nfunction addDriverScore(newRace, newDriver, races) {\r\n  const race = races.get(newRace.name);\r\n  let driverScore = new DriverScore(\r\n    newDriver._id,\r\n    newDriver.name,\r\n    newRace.time\r\n  );\r\n\r\n  if (race === undefined) {\r\n    races.set(newRace.name, new Race(newRace.name, [driverScore]));\r\n  } else {\r\n    races.set(\r\n      race.name,\r\n      new Race(newRace.name, race.driversScore.concat(driverScore))\r\n    );\r\n  }\r\n}\r\n\r\nfunction updateScores(race, points) {\r\n  for (let i = 0; i < 10; i++) {\r\n    const driverScore = race.driversScore[i];\r\n    const index = drivers.findIndex((driver) => driver._id === driverScore.id);\r\n    drivers[index].globalScore += points[i];\r\n  }\r\n}\r\n\r\nfunction setGlobalScore(races) {\r\n  const points = [25, 18, 15, 12, 10, 8, 6, 4, 2, 1];\r\n  races.forEach((race) => {\r\n    updateScores(race, points);\r\n  });\r\n\r\n  drivers.sort(function (a, b) {\r\n    if (a.globalScore > b.globalScore) return -1;\r\n    if (a.globalScore < b.globalScore) return 1;\r\n    return 0;\r\n  });\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass DriverCard extends Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Card.Img variant='top' src={this.props.driver.picture} />\r\n        <Card.Body>\r\n          <Card.Title>{this.props.driver.name}</Card.Title>\r\n          <Card.Text>\r\n            <p>Team: {this.props.driver.team}</p>\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <p>Age: {this.props.driver.age}</p>\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <p>Global Points: {this.props.driver.globalScore}</p>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nDriverCard.propTypes = {\r\n  driver: PropTypes.object,\r\n};\r\n\r\nexport default DriverCard;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as actions from '../../actions';\r\nimport DriverCard from '../drivers/DriverCard';\r\n\r\nclass ClasificacionGlobal extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchResults();\r\n  }\r\n\r\n  popover = function (driver) {\r\n    return (\r\n      <Popover>\r\n        <DriverCard driver={driver} />\r\n      </Popover>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Table striped bordered>\r\n        <thead>\r\n          <tr>\r\n            <th>Position</th>\r\n            <th>Driver</th>\r\n            <th>Team</th>\r\n            <th>Points</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.drivers &&\r\n            this.props.drivers.map((driver, index) => (\r\n              <tr\r\n                key={index}\r\n                className={\r\n                  !this.props.isIndex && driver.name === this.props.driverName\r\n                    ? 'bold'\r\n                    : ''\r\n                }>\r\n                <td>{index + 1}</td>\r\n                {this.props.isIndex ? (\r\n                  <OverlayTrigger\r\n                    placement='right'\r\n                    overlay={this.popover(driver)}>\r\n                    <Link to={'/driver/' + driver._id}>{driver.name}</Link>\r\n                  </OverlayTrigger>\r\n                ) : (\r\n                  <td>{driver.name}</td>\r\n                )}\r\n\r\n                <td>{driver.team}</td>\r\n                <td>{driver.globalScore}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nClasificacionGlobal.propTypes = {\r\n  drivers: PropTypes.array,\r\n  isIndex: PropTypes.bool,\r\n  driverName: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { drivers: state.ranking.drivers, races: state.ranking.drivers };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(ClasificacionGlobal);\r\n","import React, { Component } from 'react';\r\n\r\nimport ClasificacionGlobal from './rankings/GlobalRanking';\r\n\r\nclass Index extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <header className='App-header'>\r\n          <h1>Karts Championship</h1>\r\n        </header>\r\n        <ClasificacionGlobal isIndex={true} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nimport * as actions from '../../actions';\r\n\r\nclass DriverRanking extends Component {\r\n  getRacePosition = (raceName) => {\r\n    const race = this.props.races.find((race) => race.name === raceName);\r\n    return race.driversScore.findIndex(\r\n      (driver) => driver.id === this.props.selectedDriver._id\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Race</th>\r\n            <th>Time</th>\r\n            <th>Position</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.selectedDriver &&\r\n            this.props.selectedDriver.races &&\r\n            this.props.selectedDriver.races.map((race, index) => (\r\n              <tr key={index}>\r\n                <td>{race.name}</td>\r\n                <td>{race.time}</td>\r\n                <td>{this.getRacePosition(race.name) + 1}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nDriverRanking.propTypes = {\r\n  driver: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { races: state.ranking.races };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(DriverRanking);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nclass RaceRanking extends Component {\r\n  render() {\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Position</th>\r\n            <th>Driver</th>\r\n            <th>Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.race &&\r\n            this.props.race.driversScore.map((driver, index) => (\r\n              <tr\r\n                key={index}\r\n                className={driver.name === this.props.driverName ? 'bold' : ''}>\r\n                <td>{index + 1}</td>\r\n                <td>{driver.name}</td>\r\n                <td>{driver.time}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nRaceRanking.propTypes = {\r\n  race: PropTypes.object,\r\n  driverName: PropTypes.string,\r\n};\r\n\r\nexport default RaceRanking;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Carousel, Col, Row, Image } from 'react-bootstrap';\r\n\r\nimport * as actions from '../../actions';\r\nimport DriverRanking from '../rankings/DriverRanking';\r\nimport RaceRanking from '../rankings/RaceRanking';\r\nimport ClasificacionGlobal from '../rankings/GlobalRanking';\r\n\r\nclass DriverProfile extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchSelectedDriver(this.props.match.params.driverId);\r\n  }\r\n\r\n  getRacePosition = (raceName, driverId) => {\r\n    const race = this.props.races.find((race) => race.name === raceName);\r\n    return race.drivers.findIndex((driver) => driver.id === driverId);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col xs={3} md={1}>\r\n            <Image\r\n              className='profilePicture'\r\n              src={this.props.selectedDriver.picture}\r\n              rounded\r\n            />\r\n          </Col>\r\n          <Col xs={9} md={4}>\r\n            <Row as={Col}>\r\n              <h1>{this.props.selectedDriver.name}</h1>\r\n            </Row>\r\n            <Row as={Col}>\r\n              <h4>Team {this.props.selectedDriver.team}</h4>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col xs={12} md={4}>\r\n            <Row as={Col}>\r\n              Global Score: {this.props.selectedDriver.globalScore}\r\n            </Row>\r\n            <Row as={Col}>Age: {this.props.selectedDriver.age}</Row>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <Carousel>\r\n              <Carousel.Item>\r\n                <h2>Personal Ranking</h2>\r\n                <DriverRanking selectedDriver={this.props.selectedDriver} />\r\n              </Carousel.Item>\r\n              {this.props.races.map((race) => (\r\n                <Carousel.Item>\r\n                  <h2>{race.name}</h2>\r\n                  <RaceRanking\r\n                    race={race}\r\n                    driverName={this.props.selectedDriver.name}\r\n                  />\r\n                </Carousel.Item>\r\n              ))}\r\n              <Carousel.Item>\r\n                <h2>Global Ranking</h2>\r\n                <ClasificacionGlobal\r\n                  isIndex={false}\r\n                  driverName={this.props.selectedDriver.name}\r\n                />\r\n              </Carousel.Item>\r\n            </Carousel>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nDriverProfile.propTypes = {\r\n  selectedDriver: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedDriver: state.ranking.selectedDriver,\r\n    races: state.ranking.races,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(DriverProfile);\r\n","import { Container } from 'react-bootstrap';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Index from './Index';\nimport DriverProfile from './drivers/DriverProfile';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <Container fluid='md'>\n          <Route exact path='/' component={Index} />\n          <Route exact path={`/driver/:driverId`} component={DriverProfile} />\n        </Container>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { FETCH_DRIVERS, FETCH_SELECTED_DRIVER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  races: [],\r\n  drivers: [],\r\n  selectedDriver: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DRIVERS:\r\n      return {\r\n        ...state,\r\n        races: [...action.races.values()],\r\n        drivers: action.drivers,\r\n      };\r\n    case FETCH_SELECTED_DRIVER:\r\n      return {\r\n        ...state,\r\n        selectedDriver: action.selectedDriver,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport rankingReducer from './rankingReducer';\r\n\r\nexport default combineReducers({ ranking: rankingReducer });\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './ranking.css';\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(reduxThunk));\r\nconst store = createStore(reducers, {}, enhancer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}